@page "/tic-tac-toe"

<h1>Tic Tac Toe</h1>

<p>Let's play a game</p>

<div
    style="
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    "
>
    <table 
        class="table"
        style="
            width: fit-content;
            height: fit-content;
        "
    >
        <tbody>
            @for (int i = 0; i < ticTacToeGame.BoardSize; i++) 
            {
                <tr
                    style="
                        font-size: 0;
                    "
                >
                @for (int j = 0; j < ticTacToeGame.BoardSize; j++) 
                {
                    var tempI = i;
                    var tempJ = j;

                    <td
                        style="
                            width: fit-content; 
                            height: fit-content;
                            border: 1px solid black;
                            padding: 0px;
                            "
                    >
                        <button
                            style="
                                width: 50px; 
                                height: 50px; 
                                padding: 0;
                                line-height: 50px;
                                font-size: 50px;
                                border: 0;
                                outline: 0;
                            "
                            @onclick=@(() => ticTacToeGame.OnMovePlayed(tempI, tempJ))
                        >
                            @ticTacToeGame.Board[tempI,tempJ].Draw()
                        </button>
                    </td>
                }
                </tr>
            }
        </tbody>
    </table>
    <div
        style="
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
        "
    >
        <button @onclick=@(() => ticTacToeGame.BoardSize++)>+</button>
        <button @onclick=@(() => ticTacToeGame.Reset())>Reset</button>
        <button @onclick=@(() => ticTacToeGame.BoardSize--)>-</button>
    </div>

        @{
            var text = "";
            if (ticTacToeGame.GameEnded) 
            {
                if (ticTacToeGame.Winner > 0) 
                {
                    text = "Player " + ticTacToeGame.Winner  + " won this game. Press Reset for a new game.";
                }

                else {
                    text = "Stalemete. Press Reset for a new game.";
                }
            }
            
            else {
                if (ticTacToeGame.Winner > 0) 
                {
                    text = "Player " + ticTacToeGame.Winner  + " won this game. Press Reset for a new game.";
                }
                else 
                {
                    text = "Player " + ticTacToeGame.CurrentPlayer + "'s turn'";
                }
            }

            <p>@text</p>
        }
</div>

    

@code {
    TicTacToeGame ticTacToeGame = new TicTacToeGame();

    public class TicTacToeGame
    {
        private readonly int MAX_BOARDSIZE = 10;
        private readonly int MIN_BOARDSIZE = 3;

        public Cell[,] Board {get; set;}
        // 1 or 2
        public int CurrentPlayer {get; set;}
        // 0 (no winner), 1 or 2
        public int Winner {get; set;}

        private int _boardSize;
        public int BoardSize {
            get 
            {
                return _boardSize;
            }
            set 
            {
                if (value <= MAX_BOARDSIZE && value >= MIN_BOARDSIZE) {
                    _boardSize = value;
                }
                Reset();
            }
        }
        public int TurnNumber {get; set;}
        public int SameCellsToWin {get; set;}
        public bool GameEnded => (TurnNumber == (BoardSize * BoardSize)) || Winner > 0;

        public TicTacToeGame() 
        {
            _boardSize = MIN_BOARDSIZE;
            Reset();
        }

        public void Reset() 
        {
            Board = new Cell[BoardSize, BoardSize];

            for (int i = 0; i < BoardSize; i++) 
            {
                for (int j = 0; j < BoardSize; j++) 
                {
                    Board[i, j] = new Cell(CellStateEnum.Empty);
                }
            }

            Winner = 0;
            CurrentPlayer = 1;
            TurnNumber = 0;
            SameCellsToWin = BoardSize >= 5 ? 5 : BoardSize;
        }

        public void OnMovePlayed(int row, int col) 
        {
            if (Winner > 0) {
                return;
            }

            if (row < 0 || row >= BoardSize) {
                return;
            }

            if (col < 0 || col >= BoardSize) {
                return;
            }

            if (Board[row, col].cellState != CellStateEnum.Empty) {
                return;
            }

            TurnNumber++;

            Board[row, col].cellState = CurrentPlayer == 1 
                ? CellStateEnum.Cross 
                : CellStateEnum.Circle;

            Winner = GetWinner(row, col);

            CurrentPlayer = 3 - CurrentPlayer;
        }

        public void OnReset() 
        {
            Reset();
        }

        public int GetWinner() 
        {
            var winStates = new List<List<Cell>>();
            
            var winStateFallingDiagonal = new List<Cell>();
            var winStateRaisingDiagonal = new List<Cell>();

            for (int i = 0; i < BoardSize; i++) 
            {
                winStateFallingDiagonal.Add(Board[i, i]);
                winStateRaisingDiagonal.Add(Board[i, BoardSize - 1 - i]);

                var winStateRow = new List<Cell>();
                var winStateColumn = new List<Cell>();

                for (int j = 0; j < BoardSize; j++) 
                {
                    winStateRow.Add(Board[i, j]);
                    winStateColumn.Add(Board[j, i]);
                }

                winStates.Add(winStateRow);
                winStates.Add(winStateColumn);
            }

            winStates.Add(winStateFallingDiagonal);
            winStates.Add(winStateRaisingDiagonal);

            var winningState = winStates.FirstOrDefault(winState => {
                var state = winState.First().cellState;

                if (state == CellStateEnum.Empty) 
                {
                    return false;
                }

                return winState.All(cell => cell.cellState == state);
            });

            if (winningState == null) 
            {
                return 0;
            }

            return winningState.First()
                .cellState == CellStateEnum.Cross ? 1 : 2;
        }

        public int GetWinner(int row, int col) 
        {
            var startPosition = new Tuple<int, int>(row, col);
            var iterators = new List<MatrixIterator>()
                {
                    new MatrixIterator(startPosition, new Tuple<int, int>(0, 1), Board, BoardSize, SameCellsToWin),
                    new MatrixIterator(startPosition, new Tuple<int, int>(1, 0), Board, BoardSize, SameCellsToWin),
                    new MatrixIterator(startPosition, new Tuple<int, int>(1, 1), Board, BoardSize, SameCellsToWin),
                    new MatrixIterator(startPosition, new Tuple<int, int>(-1, 1), Board, BoardSize, SameCellsToWin),
                };

            for (var i = 0; i < iterators.Count; i++) {
                var winner = iterators[i].GetWinner();

                if (winner != CellStateEnum.Empty) {
                    return winner == CellStateEnum.Cross ? 1 : 2;
                }
            }

            return 0;
        }
    }

    public class MatrixIterator 
    {
        public Tuple<int, int> Step {get; set;}
        public Tuple<int, int> StartPosition {get; set;}
        public int CurrentOffset {get; set;}
        public Cell[,] Board {get; set;}
        public int BoardSize {get; set;}
        public int SameCellsToWin {get; set;}
        
        public MatrixIterator (Tuple<int, int> startPosition, Tuple<int, int> step, Cell[,] board, int boardSize, int sameCellsToWin) 
        {
            StartPosition = startPosition;
            Step = step;
            Board = board;
            BoardSize = boardSize;
            SameCellsToWin = sameCellsToWin;
            CurrentOffset = 0;
        }

        public CellStateEnum GetWinner() {
            var indecies = new List<Tuple<int, int>>();
            var cells = new List<Cell>();
            var positions = CalculateNewPositions();
            cells.Add(Board[positions.Item1.Item1, positions.Item1.Item2]);
            indecies.Add(positions.Item1);

            Console.WriteLine("================================");
            Console.WriteLine($"Iterator ({Step.Item1},{Step.Item2})");
            
            positions = CalculateNewPositions();
            while (!isPositionOutOfBounds(positions.Item1) || !isPositionOutOfBounds(positions.Item2))
            {
                Console.WriteLine("-");
                Console.WriteLine($"({positions.Item1.Item1},{positions.Item1.Item2})");
                Console.WriteLine($"({positions.Item2.Item1},{positions.Item2.Item2})");
                Console.WriteLine("-");

                if (!isPositionOutOfBounds(positions.Item1))
                {
                    cells.Add(Board[positions.Item1.Item1, positions.Item1.Item2]);
                    indecies.Add(positions.Item1);
                }

                if (!isPositionOutOfBounds(positions.Item2))
                {
                    cells.Insert(0, Board[positions.Item2.Item1, positions.Item2.Item2]);
                    indecies.Insert(0, positions.Item2);
                }

                positions = CalculateNewPositions();
            }
            
            Console.WriteLine($"Indecies: {string.Join(", ", indecies.Select(index => $"({index.Item1},{index.Item2})"))}");
            Console.WriteLine($"Cells: {string.Join(", ", cells.Select(cell => $"({cell.Draw()})"))}");
            Console.WriteLine("================================");

            var targetCellType = CellStateEnum.Empty;
            int counter = 0;

            for (var i = 0; i < cells.Count; i++) 
            {
                if (cells[i].cellState == CellStateEnum.Empty || cells[i].cellState != targetCellType) 
                {
                    targetCellType = cells[i].cellState;
                    counter = 1;
                    continue;
                }

                counter++;
                if (counter >= SameCellsToWin) {
                    return targetCellType;
                }
            }

            return CellStateEnum.Empty;
        }

        public Tuple<Tuple<int, int>, Tuple<int, int>> CalculateNewPositions()
        {
            var newForwardPosition = new Tuple<int, int>(
                StartPosition.Item1 + CurrentOffset * Step.Item1,
                StartPosition.Item2 + CurrentOffset * Step.Item2);

            var newBackwardPosition = new Tuple<int, int>(
                StartPosition.Item1 - CurrentOffset * Step.Item1,
                StartPosition.Item2 - CurrentOffset * Step.Item2);

            CurrentOffset++;

            return new Tuple<Tuple<int, int>, Tuple<int, int>>(newForwardPosition, newBackwardPosition);
        }

        public bool isPositionOutOfBounds(Tuple<int, int> position) {
            return (position.Item1 >= BoardSize || position.Item1 < 0)
                || (position.Item2 >= BoardSize || position.Item2 < 0);
        }
    }

    public class Cell
    {
        public CellStateEnum cellState {get; set;}

        public Cell(CellStateEnum cellState)
        {
            this.cellState = cellState;
        }

        public string Draw() 
        {
            switch  (cellState) 
            {
                case CellStateEnum.Empty: 
                {
                    return "";
                }
                case CellStateEnum.Circle: 
                {
                    return "O";
                }
                case CellStateEnum.Cross: 
                {
                    return "X";
                }
            }

            return "Err";
        }
    }

    public enum CellStateEnum {
        Empty, Cross, Circle
    }
}
